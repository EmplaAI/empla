"""Initial schema with all Phase 1 tables

Revision ID: c14764448a4d
Revises: 
Create Date: 2025-10-29 00:48:27.412500

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import pgvector.sqlalchemy

# revision identifiers, used by Alembic.
revision: str = 'c14764448a4d'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Ensure pgvector extension is available before creating vector columns/indexes
    op.execute("CREATE EXTENSION IF NOT EXISTS vector")

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('audit_log',
    sa.Column('actor_type', sa.String(length=20), nullable=False, comment='Type of actor (employee, user, system)'),
    sa.Column('actor_id', sa.UUID(), nullable=False, comment='Actor UUID (employee/user/system)'),
    sa.Column('action_type', sa.String(length=100), nullable=False, comment='Action performed (goal_created, intention_executed, etc.)'),
    sa.Column('resource_type', sa.String(length=100), nullable=False, comment='Type of resource affected'),
    sa.Column('resource_id', sa.UUID(), nullable=True, comment='Resource UUID (if applicable)'),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False, comment='Action-specific details'),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False, comment='Additional metadata'),
    sa.Column('occurred_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When action occurred (UTC)'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier'),
    sa.Column('tenant_id', sa.UUID(), nullable=False, comment='Tenant this record belongs to'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='When this record was soft-deleted (UTC), None if active'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this record was created (UTC)'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this record was last updated (UTC)'),
    sa.CheckConstraint("actor_type IN ('employee', 'user', 'system')", name='ck_audit_log_actor_type'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_audit_action', 'audit_log', ['action_type', 'occurred_at'], unique=False)
    op.create_index('idx_audit_actor', 'audit_log', ['actor_type', 'actor_id', 'occurred_at'], unique=False)
    op.create_index('idx_audit_resource', 'audit_log', ['resource_type', 'resource_id', 'occurred_at'], unique=False)
    op.create_index('idx_audit_tenant', 'audit_log', ['tenant_id', 'occurred_at'], unique=False)
    op.create_index(op.f('ix_audit_log_tenant_id'), 'audit_log', ['tenant_id'], unique=False)
    op.create_table('tenants',
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier'),
    sa.Column('name', sa.String(length=200), nullable=False, comment='Organization display name'),
    sa.Column('slug', sa.String(length=50), nullable=False, comment="URL-safe identifier (e.g., 'acme-corp')"),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False, comment='Tenant-specific configuration (LLM preferences, branding, etc.)'),
    sa.Column('status', sa.String(length=20), server_default=sa.text("'active'"), nullable=False, comment='Account status (active, suspended, deleted)'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='When this record was soft-deleted (UTC), None if active'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this record was created (UTC)'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this record was last updated (UTC)'),
    sa.CheckConstraint("slug ~ '^[a-z0-9-]+$'", name='ck_tenants_slug_format'),
    sa.CheckConstraint("status IN ('active', 'suspended', 'deleted')", name='ck_tenants_status'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('slug')
    )
    op.create_index('idx_tenants_slug', 'tenants', ['slug'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('idx_tenants_status', 'tenants', ['status'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier'),
    sa.Column('tenant_id', sa.UUID(), nullable=False, comment='Tenant this user belongs to'),
    sa.Column('email', sa.String(length=255), nullable=False, comment='User email address'),
    sa.Column('name', sa.String(length=200), nullable=False, comment='User display name'),
    sa.Column('role', sa.String(length=20), nullable=False, comment='Authorization role (admin, manager, user)'),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False, comment='User preferences (notifications, UI settings, etc.)'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='When this record was soft-deleted (UTC), None if active'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this record was created (UTC)'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this record was last updated (UTC)'),
    sa.CheckConstraint("email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}$'", name='ck_users_email_format'),
    sa.CheckConstraint("role IN ('admin', 'manager', 'user')", name='ck_users_role'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_users_email', 'users', ['tenant_id', 'email'], unique=True, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('idx_users_tenant', 'users', ['tenant_id'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index(op.f('ix_users_tenant_id'), 'users', ['tenant_id'], unique=False)
    op.create_table('employees',
    sa.Column('name', sa.String(length=200), nullable=False, comment='Employee display name'),
    sa.Column('role', sa.String(length=50), nullable=False, comment='Employee role (sales_ae, csm, pm, sdr, recruiter, custom)'),
    sa.Column('email', sa.String(length=255), nullable=False, comment='Employee email address (must be unique within tenant)'),
    sa.Column('personality', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False, comment='Personality traits (tone, communication style, risk tolerance)'),
    sa.Column('status', sa.String(length=20), server_default=sa.text("'onboarding'"), nullable=False, comment='Operational status (onboarding, active, paused, terminated)'),
    sa.Column('lifecycle_stage', sa.String(length=20), server_default=sa.text("'shadow'"), nullable=False, comment='Learning progression stage (shadow, supervised, autonomous)'),
    sa.Column('onboarded_at', sa.DateTime(timezone=True), nullable=True, comment='When onboarding completed (UTC)'),
    sa.Column('activated_at', sa.DateTime(timezone=True), nullable=True, comment='When employee was activated (UTC)'),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False, comment='Employee configuration (loop interval, LLM model, etc.)'),
    sa.Column('capabilities', sa.ARRAY(sa.String()), server_default=sa.text("'{}'::text[]"), nullable=False, comment='Enabled capabilities (email, calendar, research, etc.)'),
    sa.Column('performance_metrics', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False, comment='Performance metrics (goals achieved, tasks completed, etc.)'),
    sa.Column('created_by', sa.UUID(), nullable=True, comment='User who created this employee'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier'),
    sa.Column('tenant_id', sa.UUID(), nullable=False, comment='Tenant this record belongs to'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='When this record was soft-deleted (UTC), None if active'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this record was created (UTC)'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this record was last updated (UTC)'),
    sa.CheckConstraint("lifecycle_stage IN ('shadow', 'supervised', 'autonomous')", name='ck_employees_lifecycle_stage'),
    sa.CheckConstraint("role IN ('sales_ae', 'csm', 'pm', 'sdr', 'recruiter', 'custom')", name='ck_employees_role'),
    sa.CheckConstraint("status IN ('onboarding', 'active', 'paused', 'terminated')", name='ck_employees_status'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_employees_email', 'employees', ['tenant_id', 'email'], unique=True, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('idx_employees_lifecycle', 'employees', ['lifecycle_stage'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('idx_employees_role', 'employees', ['tenant_id', 'role'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('idx_employees_status', 'employees', ['tenant_id', 'status'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('idx_employees_tenant', 'employees', ['tenant_id'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index(op.f('ix_employees_tenant_id'), 'employees', ['tenant_id'], unique=False)
    op.create_table('beliefs',
    sa.Column('employee_id', sa.UUID(), nullable=False, comment='Employee this belief belongs to'),
    sa.Column('belief_type', sa.String(length=20), nullable=False, comment='Type of belief (state, event, causal, evaluative)'),
    sa.Column('subject', sa.String(length=200), nullable=False, comment='What the belief is about'),
    sa.Column('predicate', sa.String(length=200), nullable=False, comment='Property or relation'),
    sa.Column('object', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Value (can be text, number, boolean, or complex object)'),
    sa.Column('confidence', sa.Float(), server_default=sa.text('0.5'), nullable=False, comment='Confidence level (0-1)'),
    sa.Column('source', sa.String(length=50), nullable=False, comment='How this belief was formed (observation, inference, told_by_human, prior)'),
    sa.Column('evidence', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), nullable=False, comment='Supporting observations (episodic memory UUIDs)'),
    sa.Column('formed_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When belief was formed (UTC)'),
    sa.Column('last_updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When belief was last updated (UTC)'),
    sa.Column('decay_rate', sa.Float(), server_default=sa.text('0.1'), nullable=False, comment='Linear decay per day (0-1)'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier'),
    sa.Column('tenant_id', sa.UUID(), nullable=False, comment='Tenant this record belongs to'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='When this record was soft-deleted (UTC), None if active'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this record was created (UTC)'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this record was last updated (UTC)'),
    sa.CheckConstraint("belief_type IN ('state', 'event', 'causal', 'evaluative')", name='ck_beliefs_belief_type'),
    sa.CheckConstraint("source IN ('observation', 'inference', 'told_by_human', 'prior')", name='ck_beliefs_source'),
    sa.CheckConstraint('confidence BETWEEN 0 AND 1', name='ck_beliefs_confidence'),
    sa.CheckConstraint('decay_rate BETWEEN 0 AND 1', name='ck_beliefs_decay_rate'),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_beliefs_confidence', 'beliefs', ['employee_id', 'confidence'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('idx_beliefs_employee', 'beliefs', ['employee_id'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('idx_beliefs_subject', 'beliefs', ['employee_id', 'subject'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('idx_beliefs_tenant', 'beliefs', ['tenant_id'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('idx_beliefs_unique_subject_predicate', 'beliefs', ['employee_id', 'subject', 'predicate'], unique=True, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('idx_beliefs_updated', 'beliefs', ['last_updated_at'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index(op.f('ix_beliefs_employee_id'), 'beliefs', ['employee_id'], unique=False)
    op.create_index(op.f('ix_beliefs_tenant_id'), 'beliefs', ['tenant_id'], unique=False)
    op.create_table('employee_goals',
    sa.Column('employee_id', sa.UUID(), nullable=False, comment='Employee this goal belongs to'),
    sa.Column('goal_type', sa.String(length=20), nullable=False, comment='Type of goal (achievement, maintenance, prevention)'),
    sa.Column('description', sa.String(length=500), nullable=False, comment='Human-readable goal description'),
    sa.Column('priority', sa.Integer(), server_default=sa.text('5'), nullable=False, comment='Priority (1=lowest, 10=highest)'),
    sa.Column('target', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Goal-specific target metrics (metric, value, timeframe, etc.)'),
    sa.Column('current_progress', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False, comment='Real-time progress tracking'),
    sa.Column('status', sa.String(length=20), server_default=sa.text("'active'"), nullable=False, comment='Goal status (active, in_progress, completed, abandoned, blocked)'),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True, comment='When goal was completed (UTC)'),
    sa.Column('abandoned_at', sa.DateTime(timezone=True), nullable=True, comment='When goal was abandoned (UTC)'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier'),
    sa.Column('tenant_id', sa.UUID(), nullable=False, comment='Tenant this record belongs to'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='When this record was soft-deleted (UTC), None if active'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this record was created (UTC)'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this record was last updated (UTC)'),
    sa.CheckConstraint("goal_type IN ('achievement', 'maintenance', 'prevention')", name='ck_employee_goals_goal_type'),
    sa.CheckConstraint("status IN ('active', 'in_progress', 'completed', 'abandoned', 'blocked')", name='ck_employee_goals_status'),
    sa.CheckConstraint('priority BETWEEN 1 AND 10', name='ck_employee_goals_priority'),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_goals_employee', 'employee_goals', ['employee_id', 'status'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('idx_goals_priority', 'employee_goals', ['employee_id', 'priority'], unique=False, postgresql_where=sa.text("status = 'active'"))
    op.create_index('idx_goals_tenant', 'employee_goals', ['tenant_id'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index(op.f('ix_employee_goals_employee_id'), 'employee_goals', ['employee_id'], unique=False)
    op.create_index(op.f('ix_employee_goals_tenant_id'), 'employee_goals', ['tenant_id'], unique=False)
    op.create_table('memory_episodes',
    sa.Column('employee_id', sa.UUID(), nullable=False, comment='Employee this memory belongs to'),
    sa.Column('episode_type', sa.String(length=20), nullable=False, comment='Type of episode (interaction, event, observation, feedback)'),
    sa.Column('description', sa.String(length=500), nullable=False, comment='Human-readable episode summary'),
    sa.Column('content', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Full episode data'),
    sa.Column('participants', sa.ARRAY(sa.String()), server_default=sa.text("'{}'::text[]"), nullable=False, comment='Email addresses or identifiers of participants'),
    sa.Column('location', sa.String(length=100), nullable=True, comment='Where episode occurred (email, slack, zoom, phone, etc.)'),
    sa.Column('embedding', pgvector.sqlalchemy.Vector(dim=1024), nullable=True, comment='1024-dim embedding for semantic similarity'),
    sa.Column('importance', sa.Float(), server_default=sa.text('0.5'), nullable=False, comment='Importance score (0-1, affects retention)'),
    sa.Column('recall_count', sa.Integer(), server_default=sa.text('0'), nullable=False, comment='How many times this memory was recalled'),
    sa.Column('last_recalled_at', sa.DateTime(timezone=True), nullable=True, comment='When this memory was last recalled (UTC)'),
    sa.Column('occurred_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When episode occurred (UTC)'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier'),
    sa.Column('tenant_id', sa.UUID(), nullable=False, comment='Tenant this record belongs to'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='When this record was soft-deleted (UTC), None if active'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this record was created (UTC)'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this record was last updated (UTC)'),
    sa.CheckConstraint("episode_type IN ('interaction', 'event', 'observation', 'feedback')", name='ck_episodes_episode_type'),
    sa.CheckConstraint('importance BETWEEN 0 AND 1', name='ck_episodes_importance'),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    # NOTE: IVFFlat index creation deferred to follow-up migration after data seeding
    # IVFFlat indexes require data to exist for clustering. Will be created in separate migration.
    # See: alembic/versions/XXX_add_ivfflat_indexes.py
    # op.create_index('idx_episodes_embedding', 'memory_episodes', ['embedding'], unique=False, postgresql_using='ivfflat', postgresql_with={'lists': 100}, postgresql_ops={'embedding': 'vector_cosine_ops'}, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('idx_episodes_employee', 'memory_episodes', ['employee_id', 'occurred_at'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('idx_episodes_occurred', 'memory_episodes', ['occurred_at'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('idx_episodes_participants', 'memory_episodes', ['participants'], unique=False, postgresql_using='gin', postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('idx_episodes_tenant', 'memory_episodes', ['tenant_id'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('idx_episodes_type', 'memory_episodes', ['employee_id', 'episode_type'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index(op.f('ix_memory_episodes_employee_id'), 'memory_episodes', ['employee_id'], unique=False)
    op.create_index(op.f('ix_memory_episodes_tenant_id'), 'memory_episodes', ['tenant_id'], unique=False)
    op.create_table('memory_procedural',
    sa.Column('employee_id', sa.UUID(), nullable=False, comment='Employee this memory belongs to'),
    sa.Column('procedure_name', sa.String(length=200), nullable=False, comment='Unique procedure name'),
    sa.Column('description', sa.String(length=500), nullable=False, comment='Human-readable procedure description'),
    sa.Column('procedure_type', sa.String(length=20), nullable=False, comment='Type of procedure (skill, workflow, heuristic)'),
    sa.Column('steps', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Structured procedure steps'),
    sa.Column('conditions', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False, comment='When to use this procedure (context matching)'),
    sa.Column('success_rate', sa.Float(), server_default=sa.text('0.0'), nullable=False, comment='Success rate (0-1, learned from outcomes)'),
    sa.Column('execution_count', sa.Integer(), server_default=sa.text('0'), nullable=False, comment='How many times this procedure was executed'),
    sa.Column('last_executed_at', sa.DateTime(timezone=True), nullable=True, comment='When this procedure was last executed (UTC)'),
    sa.Column('learned_from', sa.String(length=50), nullable=False, comment='How this procedure was learned'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier'),
    sa.Column('tenant_id', sa.UUID(), nullable=False, comment='Tenant this record belongs to'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='When this record was soft-deleted (UTC), None if active'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this record was created (UTC)'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this record was last updated (UTC)'),
    sa.CheckConstraint("learned_from IN ('human_demonstration', 'trial_and_error', 'instruction', 'pre_built')", name='ck_procedural_learned_from'),
    sa.CheckConstraint("procedure_type IN ('skill', 'workflow', 'heuristic')", name='ck_procedural_procedure_type'),
    sa.CheckConstraint('success_rate BETWEEN 0 AND 1', name='ck_procedural_success_rate'),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_procedural_employee', 'memory_procedural', ['employee_id'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('idx_procedural_success', 'memory_procedural', ['employee_id', 'success_rate'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('idx_procedural_tenant', 'memory_procedural', ['tenant_id'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('idx_procedural_type', 'memory_procedural', ['employee_id', 'procedure_type'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('idx_procedural_unique_name', 'memory_procedural', ['employee_id', 'procedure_name'], unique=True, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index(op.f('ix_memory_procedural_employee_id'), 'memory_procedural', ['employee_id'], unique=False)
    op.create_index(op.f('ix_memory_procedural_tenant_id'), 'memory_procedural', ['tenant_id'], unique=False)
    op.create_table('memory_semantic',
    sa.Column('employee_id', sa.UUID(), nullable=False, comment='Employee this memory belongs to'),
    sa.Column('fact_type', sa.String(length=20), nullable=False, comment='Type of fact (entity, relationship, rule, definition)'),
    sa.Column('subject', sa.String(length=200), nullable=False, comment='Subject of the fact'),
    sa.Column('predicate', sa.String(length=200), nullable=False, comment='Predicate (relation or property)'),
    sa.Column('object', sa.String(length=500), nullable=False, comment='Object of the fact'),
    sa.Column('confidence', sa.Float(), server_default=sa.text('1.0'), nullable=False, comment='Confidence in this fact (0-1)'),
    sa.Column('source', sa.String(length=200), nullable=True, comment='Where this fact came from'),
    sa.Column('verified', sa.Boolean(), server_default=sa.text('false'), nullable=False, comment='Whether fact was verified by human'),
    sa.Column('embedding', pgvector.sqlalchemy.Vector(dim=1024), nullable=True, comment='1024-dim embedding for semantic similarity'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier'),
    sa.Column('tenant_id', sa.UUID(), nullable=False, comment='Tenant this record belongs to'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='When this record was soft-deleted (UTC), None if active'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this record was created (UTC)'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this record was last updated (UTC)'),
    sa.CheckConstraint("fact_type IN ('entity', 'relationship', 'rule', 'definition')", name='ck_semantic_fact_type'),
    sa.CheckConstraint('confidence BETWEEN 0 AND 1', name='ck_semantic_confidence'),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    # NOTE: IVFFlat index creation deferred to follow-up migration after data seeding
    # IVFFlat indexes require data to exist for clustering. Will be created in separate migration.
    # See: alembic/versions/XXX_add_ivfflat_indexes.py
    # op.create_index('idx_semantic_embedding', 'memory_semantic', ['embedding'], unique=False, postgresql_using='ivfflat', postgresql_with={'lists': 100}, postgresql_ops={'embedding': 'vector_cosine_ops'}, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('idx_semantic_employee', 'memory_semantic', ['employee_id'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('idx_semantic_fts', 'memory_semantic', [sa.text("to_tsvector('english', subject || ' ' || predicate || ' ' || object)")], unique=False, postgresql_using='gin', postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('idx_semantic_subject', 'memory_semantic', ['employee_id', 'subject'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('idx_semantic_tenant', 'memory_semantic', ['tenant_id'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('idx_semantic_type', 'memory_semantic', ['employee_id', 'fact_type'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index(op.f('ix_memory_semantic_employee_id'), 'memory_semantic', ['employee_id'], unique=False)
    op.create_index(op.f('ix_memory_semantic_tenant_id'), 'memory_semantic', ['tenant_id'], unique=False)
    op.create_table('memory_working',
    sa.Column('employee_id', sa.UUID(), nullable=False, comment='Employee this memory belongs to'),
    sa.Column('context_type', sa.String(length=50), nullable=False, comment='Type of context (current_task, conversation, scratchpad, recent_observation)'),
    sa.Column('content', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Context data'),
    sa.Column('priority', sa.Integer(), server_default=sa.text('5'), nullable=False, comment='Priority (1=lowest, 10=highest, affects eviction)'),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True, comment='When to auto-evict this memory (UTC)'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier'),
    sa.Column('tenant_id', sa.UUID(), nullable=False, comment='Tenant this record belongs to'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='When this record was soft-deleted (UTC), None if active'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this record was created (UTC)'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this record was last updated (UTC)'),
    sa.CheckConstraint("context_type IN ('current_task', 'conversation', 'scratchpad', 'recent_observation')", name='ck_working_context_type'),
    sa.CheckConstraint('priority BETWEEN 1 AND 10', name='ck_working_priority'),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_working_employee', 'memory_working', ['employee_id', 'priority'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('idx_working_expires', 'memory_working', ['expires_at'], unique=False, postgresql_where=sa.text('deleted_at IS NULL AND expires_at IS NOT NULL'))
    op.create_index('idx_working_tenant', 'memory_working', ['tenant_id'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('idx_working_type', 'memory_working', ['employee_id', 'context_type'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index(op.f('ix_memory_working_employee_id'), 'memory_working', ['employee_id'], unique=False)
    op.create_index(op.f('ix_memory_working_tenant_id'), 'memory_working', ['tenant_id'], unique=False)
    op.create_table('metrics',
    sa.Column('employee_id', sa.UUID(), nullable=True, comment='Employee this metric relates to (None for system-wide metrics)'),
    sa.Column('metric_name', sa.String(length=200), nullable=False, comment='Metric name (dotted notation: bdi.strategic_planning.duration)'),
    sa.Column('metric_type', sa.String(length=20), nullable=False, comment='Type of metric (counter, gauge, histogram)'),
    sa.Column('value', sa.Float(), nullable=False, comment='Metric value'),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False, comment='Metric dimensions (goal_type, outcome, etc.)'),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When metric was recorded (UTC)'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier'),
    sa.Column('tenant_id', sa.UUID(), nullable=False, comment='Tenant this record belongs to'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='When this record was soft-deleted (UTC), None if active'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this record was created (UTC)'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this record was last updated (UTC)'),
    sa.CheckConstraint("metric_type IN ('counter', 'gauge', 'histogram')", name='ck_metrics_metric_type'),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_metrics_employee', 'metrics', ['employee_id', 'metric_name', 'timestamp'], unique=False, postgresql_where=sa.text('employee_id IS NOT NULL'))
    op.create_index('idx_metrics_name', 'metrics', ['metric_name', 'timestamp'], unique=False)
    op.create_index('idx_metrics_tenant', 'metrics', ['tenant_id', 'timestamp'], unique=False)
    op.create_index(op.f('ix_metrics_tenant_id'), 'metrics', ['tenant_id'], unique=False)
    op.create_table('belief_history',
    sa.Column('employee_id', sa.UUID(), nullable=False, comment='Employee this belief change relates to'),
    sa.Column('belief_id', sa.UUID(), nullable=False, comment='Belief that changed'),
    sa.Column('change_type', sa.String(length=20), nullable=False, comment='Type of change (created, updated, deleted, decayed)'),
    sa.Column('old_value', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Previous value'),
    sa.Column('new_value', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='New value'),
    sa.Column('old_confidence', sa.Float(), nullable=True, comment='Previous confidence'),
    sa.Column('new_confidence', sa.Float(), nullable=True, comment='New confidence'),
    sa.Column('reason', sa.String(length=500), nullable=True, comment='Why belief changed'),
    sa.Column('changed_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When change occurred (UTC)'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier'),
    sa.Column('tenant_id', sa.UUID(), nullable=False, comment='Tenant this record belongs to'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='When this record was soft-deleted (UTC), None if active'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this record was created (UTC)'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this record was last updated (UTC)'),
    sa.CheckConstraint("change_type IN ('created', 'updated', 'deleted', 'decayed')", name='ck_belief_history_change_type'),
    sa.ForeignKeyConstraint(['belief_id'], ['beliefs.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_belief_history_belief', 'belief_history', ['belief_id', 'changed_at'], unique=False)
    op.create_index('idx_belief_history_employee', 'belief_history', ['employee_id', 'changed_at'], unique=False)
    op.create_index('idx_belief_history_tenant', 'belief_history', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_belief_history_belief_id'), 'belief_history', ['belief_id'], unique=False)
    op.create_index(op.f('ix_belief_history_employee_id'), 'belief_history', ['employee_id'], unique=False)
    op.create_index(op.f('ix_belief_history_tenant_id'), 'belief_history', ['tenant_id'], unique=False)
    op.create_table('employee_intentions',
    sa.Column('employee_id', sa.UUID(), nullable=False, comment='Employee this intention belongs to'),
    sa.Column('goal_id', sa.UUID(), nullable=True, comment='Goal this intention serves (None for opportunistic intentions)'),
    sa.Column('intention_type', sa.String(length=20), nullable=False, comment='Type of intention (action, tactic, strategy)'),
    sa.Column('description', sa.String(length=500), nullable=False, comment='Human-readable intention description'),
    sa.Column('plan', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Structured plan (steps, resources, expected outcomes)'),
    sa.Column('status', sa.String(length=20), server_default=sa.text("'planned'"), nullable=False, comment='Execution status (planned, in_progress, completed, failed, abandoned)'),
    sa.Column('priority', sa.Integer(), server_default=sa.text('5'), nullable=False, comment='Priority (1=lowest, 10=highest)'),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True, comment='When execution started (UTC)'),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True, comment='When execution completed (UTC)'),
    sa.Column('failed_at', sa.DateTime(timezone=True), nullable=True, comment='When execution failed (UTC)'),
    sa.Column('context', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False, comment='Why this plan was chosen (rationale, alternatives considered)'),
    sa.Column('dependencies', sa.ARRAY(sa.UUID()), server_default=sa.text("'{}'::uuid[]"), nullable=False, comment='Other intention UUIDs this depends on'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier'),
    sa.Column('tenant_id', sa.UUID(), nullable=False, comment='Tenant this record belongs to'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='When this record was soft-deleted (UTC), None if active'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this record was created (UTC)'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this record was last updated (UTC)'),
    sa.CheckConstraint("intention_type IN ('action', 'tactic', 'strategy')", name='ck_employee_intentions_intention_type'),
    sa.CheckConstraint("status IN ('planned', 'in_progress', 'completed', 'failed', 'abandoned')", name='ck_employee_intentions_status'),
    sa.CheckConstraint('priority BETWEEN 1 AND 10', name='ck_employee_intentions_priority'),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['goal_id'], ['employee_goals.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_intentions_employee', 'employee_intentions', ['employee_id', 'status'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('idx_intentions_goal', 'employee_intentions', ['goal_id'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('idx_intentions_priority', 'employee_intentions', ['employee_id', 'priority'], unique=False, postgresql_where=sa.text("status = 'planned'"))
    op.create_index('idx_intentions_status', 'employee_intentions', ['status'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('idx_intentions_tenant', 'employee_intentions', ['tenant_id'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index(op.f('ix_employee_intentions_employee_id'), 'employee_intentions', ['employee_id'], unique=False)
    op.create_index(op.f('ix_employee_intentions_goal_id'), 'employee_intentions', ['goal_id'], unique=False)
    op.create_index(op.f('ix_employee_intentions_tenant_id'), 'employee_intentions', ['tenant_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_employee_intentions_tenant_id'), table_name='employee_intentions')
    op.drop_index(op.f('ix_employee_intentions_goal_id'), table_name='employee_intentions')
    op.drop_index(op.f('ix_employee_intentions_employee_id'), table_name='employee_intentions')
    op.drop_index('idx_intentions_tenant', table_name='employee_intentions', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index('idx_intentions_status', table_name='employee_intentions', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index('idx_intentions_priority', table_name='employee_intentions', postgresql_where=sa.text("status = 'planned'"))
    op.drop_index('idx_intentions_goal', table_name='employee_intentions', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index('idx_intentions_employee', table_name='employee_intentions', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_table('employee_intentions')
    op.drop_index(op.f('ix_belief_history_tenant_id'), table_name='belief_history')
    op.drop_index(op.f('ix_belief_history_employee_id'), table_name='belief_history')
    op.drop_index(op.f('ix_belief_history_belief_id'), table_name='belief_history')
    op.drop_index('idx_belief_history_tenant', table_name='belief_history')
    op.drop_index('idx_belief_history_employee', table_name='belief_history')
    op.drop_index('idx_belief_history_belief', table_name='belief_history')
    op.drop_table('belief_history')
    op.drop_index(op.f('ix_metrics_tenant_id'), table_name='metrics')
    op.drop_index('idx_metrics_tenant', table_name='metrics')
    op.drop_index('idx_metrics_name', table_name='metrics')
    op.drop_index('idx_metrics_employee', table_name='metrics', postgresql_where=sa.text('employee_id IS NOT NULL'))
    op.drop_table('metrics')
    op.drop_index(op.f('ix_memory_working_tenant_id'), table_name='memory_working')
    op.drop_index(op.f('ix_memory_working_employee_id'), table_name='memory_working')
    op.drop_index('idx_working_type', table_name='memory_working', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index('idx_working_tenant', table_name='memory_working', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index('idx_working_expires', table_name='memory_working', postgresql_where=sa.text('deleted_at IS NULL AND expires_at IS NOT NULL'))
    op.drop_index('idx_working_employee', table_name='memory_working', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_table('memory_working')
    op.drop_index(op.f('ix_memory_semantic_tenant_id'), table_name='memory_semantic')
    op.drop_index(op.f('ix_memory_semantic_employee_id'), table_name='memory_semantic')
    op.drop_index('idx_semantic_type', table_name='memory_semantic', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index('idx_semantic_tenant', table_name='memory_semantic', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index('idx_semantic_subject', table_name='memory_semantic', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index('idx_semantic_fts', table_name='memory_semantic', postgresql_using='gin', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index('idx_semantic_employee', table_name='memory_semantic', postgresql_where=sa.text('deleted_at IS NULL'))
    # NOTE: IVFFlat index was deferred, so no need to drop here
    # op.drop_index('idx_semantic_embedding', table_name='memory_semantic', postgresql_using='ivfflat', postgresql_with={'lists': 100}, postgresql_ops={'embedding': 'vector_cosine_ops'}, postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_table('memory_semantic')
    op.drop_index(op.f('ix_memory_procedural_tenant_id'), table_name='memory_procedural')
    op.drop_index(op.f('ix_memory_procedural_employee_id'), table_name='memory_procedural')
    op.drop_index('idx_procedural_unique_name', table_name='memory_procedural', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index('idx_procedural_type', table_name='memory_procedural', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index('idx_procedural_tenant', table_name='memory_procedural', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index('idx_procedural_success', table_name='memory_procedural', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index('idx_procedural_employee', table_name='memory_procedural', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_table('memory_procedural')
    op.drop_index(op.f('ix_memory_episodes_tenant_id'), table_name='memory_episodes')
    op.drop_index(op.f('ix_memory_episodes_employee_id'), table_name='memory_episodes')
    op.drop_index('idx_episodes_type', table_name='memory_episodes', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index('idx_episodes_tenant', table_name='memory_episodes', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index('idx_episodes_participants', table_name='memory_episodes', postgresql_using='gin', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index('idx_episodes_occurred', table_name='memory_episodes', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index('idx_episodes_employee', table_name='memory_episodes', postgresql_where=sa.text('deleted_at IS NULL'))
    # NOTE: IVFFlat index was deferred, so no need to drop here
    # op.drop_index('idx_episodes_embedding', table_name='memory_episodes', postgresql_using='ivfflat', postgresql_with={'lists': 100}, postgresql_ops={'embedding': 'vector_cosine_ops'}, postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_table('memory_episodes')
    op.drop_index(op.f('ix_employee_goals_tenant_id'), table_name='employee_goals')
    op.drop_index(op.f('ix_employee_goals_employee_id'), table_name='employee_goals')
    op.drop_index('idx_goals_tenant', table_name='employee_goals', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index('idx_goals_priority', table_name='employee_goals', postgresql_where=sa.text("status = 'active'"))
    op.drop_index('idx_goals_employee', table_name='employee_goals', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_table('employee_goals')
    op.drop_index(op.f('ix_beliefs_tenant_id'), table_name='beliefs')
    op.drop_index(op.f('ix_beliefs_employee_id'), table_name='beliefs')
    op.drop_index('idx_beliefs_updated', table_name='beliefs', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index('idx_beliefs_unique_subject_predicate', table_name='beliefs', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index('idx_beliefs_tenant', table_name='beliefs', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index('idx_beliefs_subject', table_name='beliefs', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index('idx_beliefs_employee', table_name='beliefs', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index('idx_beliefs_confidence', table_name='beliefs', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_table('beliefs')
    op.drop_index(op.f('ix_employees_tenant_id'), table_name='employees')
    op.drop_index('idx_employees_tenant', table_name='employees', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index('idx_employees_status', table_name='employees', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index('idx_employees_role', table_name='employees', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index('idx_employees_lifecycle', table_name='employees', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index('idx_employees_email', table_name='employees', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_table('employees')
    op.drop_index(op.f('ix_users_tenant_id'), table_name='users')
    op.drop_index('idx_users_tenant', table_name='users', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index('idx_users_email', table_name='users', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_table('users')
    op.drop_index('idx_tenants_status', table_name='tenants', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index('idx_tenants_slug', table_name='tenants', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_table('tenants')
    op.drop_index(op.f('ix_audit_log_tenant_id'), table_name='audit_log')
    op.drop_index('idx_audit_tenant', table_name='audit_log')
    op.drop_index('idx_audit_resource', table_name='audit_log')
    op.drop_index('idx_audit_actor', table_name='audit_log')
    op.drop_index('idx_audit_action', table_name='audit_log')
    op.drop_table('audit_log')
    # ### end Alembic commands ###

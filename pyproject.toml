[project]
name = "empla"
version = "0.1.0"
description = "Production-Ready Digital Employees + Extensible Platform to Build Your Own"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "Apache-2.0"}
authors = [
    {name = "empla contributors"}
]
maintainers = [
    {name = "empla contributors"}
]
keywords = [
    "ai",
    "agents",
    "autonomous",
    "bdi",
    "digital-employees",
    "llm",
    "multi-agent",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    # Web Framework
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.30.0",

    # Data Validation & Settings
    "pydantic>=2.9.0",
    "pydantic-settings>=2.5.0",

    # Database
    "sqlalchemy>=2.0.35",
    "asyncpg>=0.29.0",  # Async PostgreSQL driver
    "alembic>=1.13.0",  # Database migrations
    "pgvector>=0.3.0",  # Vector support for PostgreSQL

    # AI/LLM
    "anthropic>=0.39.0",  # Claude API

    # HTTP Client
    "httpx>=0.27.0",  # Async HTTP client

    # Utilities
    "python-dotenv>=1.0.0",  # Environment variables
    "structlog>=24.4.0",  # Structured logging
    "python-dateutil>=2.9.0",  # Date utilities
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",

    # Type Checking
    "mypy>=1.11.0",

    # Linting & Formatting
    "ruff>=0.7.0",

    # Git Hooks
    "pre-commit>=4.0.0",

    # Development Tools
    "ipython>=8.29.0",  # Better REPL
    "rich>=13.9.0",  # Beautiful terminal output
]

[project.urls]
Homepage = "https://github.com/empla-ai/empla"
Documentation = "https://github.com/empla-ai/empla/tree/main/docs"
Repository = "https://github.com/empla-ai/empla"
Issues = "https://github.com/empla-ai/empla/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# ==========================================
# Ruff Configuration (Linting + Formatting)
# ==========================================

[tool.ruff]
line-length = 100
target-version = "py311"
src = ["empla"]  # Top-level package directory

[tool.ruff.lint]
# Enable comprehensive rule sets
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort (import sorting)
    "N",      # pep8-naming
    "UP",     # pyupgrade (modern Python idioms)
    "ANN",    # flake8-annotations (type hints)
    "ASYNC",  # flake8-async
    "B",      # flake8-bugbear (likely bugs)
    "A",      # flake8-builtins (shadowing builtins)
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez (timezone awareness)
    "PIE",    # flake8-pie (misc lints)
    "PT",     # flake8-pytest-style
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SIM",    # flake8-simplify
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate (commented-out code)
    "PL",     # pylint
    "RUF",    # ruff-specific rules
]

# Ignore specific rules
ignore = [
    "ANN101",  # Missing type annotation for self
    "ANN102",  # Missing type annotation for cls
    "ANN401",  # Dynamically typed expressions (Any) are disallowed
    "PLR0913", # Too many arguments to function call
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "ANN",     # Don't require type hints in tests
    "ARG",     # Allow unused arguments in tests (fixtures)
    "PLR2004", # Allow magic values in tests
]

[tool.ruff.lint.isort]
known-first-party = ["empla"]

[tool.ruff.lint.pydocstyle]
convention = "google"

# ==========================================
# MyPy Configuration (Type Checking)
# ==========================================

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
strict_equality = true

# Ignore missing imports for third-party libraries without type stubs
[[tool.mypy.overrides]]
module = [
    "anthropic.*",
    "pgvector.*",
]
ignore_missing_imports = true

# ==========================================
# Pytest Configuration (Testing)
# ==========================================

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--cov=empla",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (DB, external services)",
    "e2e: End-to-end tests (full workflows)",
    "slow: Slow tests (skip in fast CI)",
]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
]

# ==========================================
# Coverage Configuration
# ==========================================

[tool.coverage.run]
source = ["empla"]  # Coverage for empla package
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "@overload",
]
